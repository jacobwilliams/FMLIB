
 MODULE FM_DOUBLE_INT

!  FM_doubleint 1.4                   David M. Smith                   Double Length Integer Support

!  This module extends the definition of basic FM types (FM), (IM), and (ZM) so they can interact
!  with double length integer variables.

!  Warning:  This module is needed only when the user's program explicitly declares double length
!            integer variables.  If double length integers are obtained by using a compiler switch
!            to change the default integer size for the entire program (such as with gfortran's
!            -fdefault-integer-8 option), then compiling the basic FM package with the same option
!            means this module is not needed.

!  Not all compilers might support double length integers, but for those that do, variables can be
!  declared via the SELECTED_REAL_KIND function.

!  For example, when this module was first written, typical computer hardware supported 32-bit
!  integers as default precision and 64-bits as double precision.  64-bit integers allowed values
!  up to 2**63 - 1, which has 19 decimal digits.

!  So SELECTED_INT_KIND(15) could be used to select this 64-bit format.

!  The routines in this interface extend basic functions like TO_FM, TO_IM, TO_ZM so they can be
!  used with quad real or complex arguments.  New conversion function TO_DOUBLE_INT will take FM,
!  IM, or ZM inputs and convert to double integers.

!  Other mixed-mode operations, such as assignment ( a = b ), logical comparisons, and arithmetic
!  are also provided.  As with the basic FMZM module, assignments and arithmetic may also involve
!  1 or 2-dimensional arrays.

    USE FMZM

    INTEGER, PARAMETER :: DOUBLE_INT = SELECTED_INT_KIND(15)

    INTERFACE TO_FM
       MODULE PROCEDURE FM_DI
       MODULE PROCEDURE FM_DI1
       MODULE PROCEDURE FM_DI2
    END INTERFACE

    INTERFACE TO_IM
       MODULE PROCEDURE IM_DI
       MODULE PROCEDURE IM_DI1
       MODULE PROCEDURE IM_DI2
    END INTERFACE

    INTERFACE TO_ZM
       MODULE PROCEDURE ZM_DI
       MODULE PROCEDURE ZM2_DI
       MODULE PROCEDURE ZM_DI1
       MODULE PROCEDURE ZM_DI2
    END INTERFACE

    INTERFACE TO_DOUBLE_INT
       MODULE PROCEDURE FM_2DI
       MODULE PROCEDURE IM_2DI
       MODULE PROCEDURE ZM_2DI
       MODULE PROCEDURE FM_2DI1
       MODULE PROCEDURE IM_2DI1
       MODULE PROCEDURE ZM_2DI1
       MODULE PROCEDURE FM_2DI2
       MODULE PROCEDURE IM_2DI2
       MODULE PROCEDURE ZM_2DI2
    END INTERFACE

    INTERFACE ASSIGNMENT (=)
       MODULE PROCEDURE FMEQ_DIFM
       MODULE PROCEDURE FMEQ_DIIM
       MODULE PROCEDURE FMEQ_DIZM
       MODULE PROCEDURE FMEQ_FMDI
       MODULE PROCEDURE FMEQ_IMDI
       MODULE PROCEDURE FMEQ_ZMDI
       MODULE PROCEDURE FMEQ_FM1DI
       MODULE PROCEDURE FMEQ_DI1FM
       MODULE PROCEDURE FMEQ_FM1DI1
       MODULE PROCEDURE FMEQ_DI1FM1
       MODULE PROCEDURE FMEQ_IM1DI
       MODULE PROCEDURE FMEQ_DI1IM
       MODULE PROCEDURE FMEQ_IM1DI1
       MODULE PROCEDURE FMEQ_DI1IM1
       MODULE PROCEDURE FMEQ_ZM1DI
       MODULE PROCEDURE FMEQ_DI1ZM
       MODULE PROCEDURE FMEQ_ZM1DI1
       MODULE PROCEDURE FMEQ_DI1ZM1
       MODULE PROCEDURE FMEQ_FM2DI
       MODULE PROCEDURE FMEQ_DI2FM
       MODULE PROCEDURE FMEQ_FM2DI2
       MODULE PROCEDURE FMEQ_DI2FM2
       MODULE PROCEDURE FMEQ_IM2DI
       MODULE PROCEDURE FMEQ_DI2IM
       MODULE PROCEDURE FMEQ_IM2DI2
       MODULE PROCEDURE FMEQ_DI2IM2
       MODULE PROCEDURE FMEQ_ZM2DI
       MODULE PROCEDURE FMEQ_DI2ZM
       MODULE PROCEDURE FMEQ_ZM2DI2
       MODULE PROCEDURE FMEQ_DI2ZM2
    END INTERFACE

    INTERFACE OPERATOR (==)
       MODULE PROCEDURE FMLEQ_DIFM
       MODULE PROCEDURE FMLEQ_DIIM
       MODULE PROCEDURE FMLEQ_DIZM
       MODULE PROCEDURE FMLEQ_FMDI
       MODULE PROCEDURE FMLEQ_IMDI
       MODULE PROCEDURE FMLEQ_ZMDI
    END INTERFACE

    INTERFACE OPERATOR (/=)
       MODULE PROCEDURE FMLNE_DIFM
       MODULE PROCEDURE FMLNE_DIIM
       MODULE PROCEDURE FMLNE_DIZM
       MODULE PROCEDURE FMLNE_FMDI
       MODULE PROCEDURE FMLNE_IMDI
       MODULE PROCEDURE FMLNE_ZMDI
    END INTERFACE

    INTERFACE OPERATOR (>)
       MODULE PROCEDURE FMLGT_DIFM
       MODULE PROCEDURE FMLGT_DIIM
       MODULE PROCEDURE FMLGT_FMDI
       MODULE PROCEDURE FMLGT_IMDI
    END INTERFACE

    INTERFACE OPERATOR (>=)
       MODULE PROCEDURE FMLGE_DIFM
       MODULE PROCEDURE FMLGE_DIIM
       MODULE PROCEDURE FMLGE_FMDI
       MODULE PROCEDURE FMLGE_IMDI
    END INTERFACE

    INTERFACE OPERATOR (<)
       MODULE PROCEDURE FMLLT_DIFM
       MODULE PROCEDURE FMLLT_DIIM
       MODULE PROCEDURE FMLLT_FMDI
       MODULE PROCEDURE FMLLT_IMDI
    END INTERFACE

    INTERFACE OPERATOR (<=)
       MODULE PROCEDURE FMLLE_DIFM
       MODULE PROCEDURE FMLLE_DIIM
       MODULE PROCEDURE FMLLE_FMDI
       MODULE PROCEDURE FMLLE_IMDI
    END INTERFACE

    INTERFACE OPERATOR (+)
       MODULE PROCEDURE FMADD_DIFM
       MODULE PROCEDURE FMADD_DIIM
       MODULE PROCEDURE FMADD_DIZM
       MODULE PROCEDURE FMADD_FMDI
       MODULE PROCEDURE FMADD_IMDI
       MODULE PROCEDURE FMADD_ZMDI
       MODULE PROCEDURE FMADD_DIFM1
       MODULE PROCEDURE FMADD_DIIM1
       MODULE PROCEDURE FMADD_FMDI1
       MODULE PROCEDURE FMADD_FM1DI
       MODULE PROCEDURE FMADD_DI1FM
       MODULE PROCEDURE FMADD_DI1FM1
       MODULE PROCEDURE FMADD_FM1DI1
       MODULE PROCEDURE FMADD_IMDI1
       MODULE PROCEDURE FMADD_IM1DI
       MODULE PROCEDURE FMADD_DI1IM
       MODULE PROCEDURE FMADD_DI1IM1
       MODULE PROCEDURE FMADD_IM1DI1
       MODULE PROCEDURE FMADD_DIZM1
       MODULE PROCEDURE FMADD_ZMDI1
       MODULE PROCEDURE FMADD_ZM1DI
       MODULE PROCEDURE FMADD_DI1ZM
       MODULE PROCEDURE FMADD_DI1ZM1
       MODULE PROCEDURE FMADD_ZM1DI1
       MODULE PROCEDURE FMADD_DIFM2
       MODULE PROCEDURE FMADD_DIIM2
       MODULE PROCEDURE FMADD_FMDI2
       MODULE PROCEDURE FMADD_FM2DI
       MODULE PROCEDURE FMADD_DI2FM
       MODULE PROCEDURE FMADD_DI2FM2
       MODULE PROCEDURE FMADD_FM2DI2
       MODULE PROCEDURE FMADD_IMDI2
       MODULE PROCEDURE FMADD_IM2DI
       MODULE PROCEDURE FMADD_DI2IM
       MODULE PROCEDURE FMADD_DI2IM2
       MODULE PROCEDURE FMADD_IM2DI2
       MODULE PROCEDURE FMADD_DIZM2
       MODULE PROCEDURE FMADD_ZMDI2
       MODULE PROCEDURE FMADD_ZM2DI
       MODULE PROCEDURE FMADD_DI2ZM
       MODULE PROCEDURE FMADD_DI2ZM2
       MODULE PROCEDURE FMADD_ZM2DI2
    END INTERFACE

    INTERFACE OPERATOR (-)
       MODULE PROCEDURE FMSUB_DIFM
       MODULE PROCEDURE FMSUB_DIIM
       MODULE PROCEDURE FMSUB_DIZM
       MODULE PROCEDURE FMSUB_FMDI
       MODULE PROCEDURE FMSUB_IMDI
       MODULE PROCEDURE FMSUB_ZMDI
       MODULE PROCEDURE FMSUB_DIFM1
       MODULE PROCEDURE FMSUB_DIIM1
       MODULE PROCEDURE FMSUB_FMDI1
       MODULE PROCEDURE FMSUB_FM1DI
       MODULE PROCEDURE FMSUB_DI1FM
       MODULE PROCEDURE FMSUB_DI1FM1
       MODULE PROCEDURE FMSUB_FM1DI1
       MODULE PROCEDURE FMSUB_IMDI1
       MODULE PROCEDURE FMSUB_IM1DI
       MODULE PROCEDURE FMSUB_DI1IM
       MODULE PROCEDURE FMSUB_DI1IM1
       MODULE PROCEDURE FMSUB_IM1DI1
       MODULE PROCEDURE FMSUB_DIZM1
       MODULE PROCEDURE FMSUB_ZMDI1
       MODULE PROCEDURE FMSUB_ZM1DI
       MODULE PROCEDURE FMSUB_DI1ZM
       MODULE PROCEDURE FMSUB_DI1ZM1
       MODULE PROCEDURE FMSUB_ZM1DI1
       MODULE PROCEDURE FMSUB_DIFM2
       MODULE PROCEDURE FMSUB_DIIM2
       MODULE PROCEDURE FMSUB_FMDI2
       MODULE PROCEDURE FMSUB_FM2DI
       MODULE PROCEDURE FMSUB_DI2FM
       MODULE PROCEDURE FMSUB_DI2FM2
       MODULE PROCEDURE FMSUB_FM2DI2
       MODULE PROCEDURE FMSUB_IMDI2
       MODULE PROCEDURE FMSUB_IM2DI
       MODULE PROCEDURE FMSUB_DI2IM
       MODULE PROCEDURE FMSUB_DI2IM2
       MODULE PROCEDURE FMSUB_IM2DI2
       MODULE PROCEDURE FMSUB_DIZM2
       MODULE PROCEDURE FMSUB_ZMDI2
       MODULE PROCEDURE FMSUB_ZM2DI
       MODULE PROCEDURE FMSUB_DI2ZM
       MODULE PROCEDURE FMSUB_DI2ZM2
       MODULE PROCEDURE FMSUB_ZM2DI2
    END INTERFACE

    INTERFACE OPERATOR (*)
       MODULE PROCEDURE FMMPY_DIFM
       MODULE PROCEDURE FMMPY_DIIM
       MODULE PROCEDURE FMMPY_DIZM
       MODULE PROCEDURE FMMPY_FMDI
       MODULE PROCEDURE FMMPY_IMDI
       MODULE PROCEDURE FMMPY_ZMDI
       MODULE PROCEDURE FMMPY_DIFM1
       MODULE PROCEDURE FMMPY_DIIM1
       MODULE PROCEDURE FMMPY_FMDI1
       MODULE PROCEDURE FMMPY_FM1DI
       MODULE PROCEDURE FMMPY_DI1FM
       MODULE PROCEDURE FMMPY_DI1FM1
       MODULE PROCEDURE FMMPY_FM1DI1
       MODULE PROCEDURE FMMPY_IMDI1
       MODULE PROCEDURE FMMPY_IM1DI
       MODULE PROCEDURE FMMPY_DI1IM
       MODULE PROCEDURE FMMPY_DI1IM1
       MODULE PROCEDURE FMMPY_IM1DI1
       MODULE PROCEDURE FMMPY_DIZM1
       MODULE PROCEDURE FMMPY_ZMDI1
       MODULE PROCEDURE FMMPY_ZM1DI
       MODULE PROCEDURE FMMPY_DI1ZM
       MODULE PROCEDURE FMMPY_DI1ZM1
       MODULE PROCEDURE FMMPY_ZM1DI1
       MODULE PROCEDURE FMMPY_DIFM2
       MODULE PROCEDURE FMMPY_DIIM2
       MODULE PROCEDURE FMMPY_FMDI2
       MODULE PROCEDURE FMMPY_FM2DI
       MODULE PROCEDURE FMMPY_DI2FM
       MODULE PROCEDURE FMMPY_DI2FM2
       MODULE PROCEDURE FMMPY_FM2DI2
       MODULE PROCEDURE FMMPY_IMDI2
       MODULE PROCEDURE FMMPY_IM2DI
       MODULE PROCEDURE FMMPY_DI2IM
       MODULE PROCEDURE FMMPY_DI2IM2
       MODULE PROCEDURE FMMPY_IM2DI2
       MODULE PROCEDURE FMMPY_DIZM2
       MODULE PROCEDURE FMMPY_ZMDI2
       MODULE PROCEDURE FMMPY_ZM2DI
       MODULE PROCEDURE FMMPY_DI2ZM
       MODULE PROCEDURE FMMPY_DI2ZM2
       MODULE PROCEDURE FMMPY_ZM2DI2
    END INTERFACE

    INTERFACE OPERATOR (/)
       MODULE PROCEDURE FMDIV_DIFM
       MODULE PROCEDURE FMDIV_DIIM
       MODULE PROCEDURE FMDIV_DIZM
       MODULE PROCEDURE FMDIV_FMDI
       MODULE PROCEDURE FMDIV_IMDI
       MODULE PROCEDURE FMDIV_ZMDI
       MODULE PROCEDURE FMDIV_DIFM1
       MODULE PROCEDURE FMDIV_DIIM1
       MODULE PROCEDURE FMDIV_FMDI1
       MODULE PROCEDURE FMDIV_FM1DI
       MODULE PROCEDURE FMDIV_DI1FM
       MODULE PROCEDURE FMDIV_DI1FM1
       MODULE PROCEDURE FMDIV_FM1DI1
       MODULE PROCEDURE FMDIV_IMDI1
       MODULE PROCEDURE FMDIV_IM1DI
       MODULE PROCEDURE FMDIV_DI1IM
       MODULE PROCEDURE FMDIV_DI1IM1
       MODULE PROCEDURE FMDIV_IM1DI1
       MODULE PROCEDURE FMDIV_DIZM1
       MODULE PROCEDURE FMDIV_ZMDI1
       MODULE PROCEDURE FMDIV_ZM1DI
       MODULE PROCEDURE FMDIV_DI1ZM
       MODULE PROCEDURE FMDIV_DI1ZM1
       MODULE PROCEDURE FMDIV_ZM1DI1
       MODULE PROCEDURE FMDIV_DIFM2
       MODULE PROCEDURE FMDIV_DIIM2
       MODULE PROCEDURE FMDIV_FMDI2
       MODULE PROCEDURE FMDIV_FM2DI
       MODULE PROCEDURE FMDIV_DI2FM
       MODULE PROCEDURE FMDIV_DI2FM2
       MODULE PROCEDURE FMDIV_FM2DI2
       MODULE PROCEDURE FMDIV_IMDI2
       MODULE PROCEDURE FMDIV_IM2DI
       MODULE PROCEDURE FMDIV_DI2IM
       MODULE PROCEDURE FMDIV_DI2IM2
       MODULE PROCEDURE FMDIV_IM2DI2
       MODULE PROCEDURE FMDIV_DIZM2
       MODULE PROCEDURE FMDIV_ZMDI2
       MODULE PROCEDURE FMDIV_ZM2DI
       MODULE PROCEDURE FMDIV_DI2ZM
       MODULE PROCEDURE FMDIV_DI2ZM2
       MODULE PROCEDURE FMDIV_ZM2DI2
    END INTERFACE

    INTERFACE OPERATOR (**)
       MODULE PROCEDURE FMPWR_DIFM
       MODULE PROCEDURE FMPWR_DIIM
       MODULE PROCEDURE FMPWR_DIZM
       MODULE PROCEDURE FMPWR_FMDI
       MODULE PROCEDURE FMPWR_IMDI
       MODULE PROCEDURE FMPWR_ZMDI
    END INTERFACE

 CONTAINS

      SUBROUTINE FMDI2M(IVAL,MA)

!  Convert double length integer IVAL to multiple precision MA.

      USE FMVALS
      IMPLICIT NONE

      TYPE(MULTI) :: MA
      INTEGER (DOUBLE_INT) :: IVAL

      REAL (KIND(1.0D0)) :: MK,ML,MVAL
      INTEGER (DOUBLE_INT) :: J,JM2,KB,KB1,N1,NMVAL,NV2
      CHARACTER(50) :: STR
      INTENT (IN) :: IVAL
      INTENT (INOUT) :: MA

      IF (.NOT. ALLOCATED(MA%MP)) THEN
          ALLOCATE(MA%MP(NDIG+2),STAT=K_STAT)
          IF (K_STAT /= 0) CALL FMDEFINE_ERROR
      ELSE IF (SIZE(MA%MP) < NDIG+2) THEN
          DEALLOCATE(MA%MP)
          ALLOCATE(MA%MP(NDIG+2),STAT=K_STAT)
          IF (K_STAT /= 0) CALL FMDEFINE_ERROR
      ENDIF

      IF (MBLOGS /= MBASE) CALL FMCONS
      KFLAG = 0
      N1 = NDIG + 1

      IF (ABS(IVAL) > MXBASE) THEN
          WRITE (STR,"(I50)") IVAL
          CALL FMST2M(STR,MA)
          GO TO 150
      ELSE
          MVAL = ABS(IVAL)
          NMVAL = MVAL
          NV2 = NMVAL - 1
          IF (NMVAL /= ABS(IVAL) .OR. NV2 /= ABS(IVAL)-1) THEN
              WRITE (STR,"(I50)") IVAL
              CALL FMST2M(STR,MA)
              GO TO 150
          ENDIF
      ENDIF

!             Check for small IVAL.

      IF (MVAL < MBASE) THEN
          DO J = 3, N1
             MA%MP(J+1) = 0
          ENDDO
          IF (IVAL >= 0) THEN
              MA%MP(3) = IVAL
              MA%MP(1) = 1
          ELSE
              MA%MP(3) = -IVAL
              MA%MP(1) = -1
          ENDIF
          IF (IVAL == 0) THEN
              MA%MP(2) = 0
          ELSE
              MA%MP(2) = 1
          ENDIF
          GO TO 150
      ENDIF

!             Compute and store the digits, right to left.

      MA%MP(2) = 0
      J = NDIG + 1

  120 MK = AINT (MVAL/MBASE)
      ML = MVAL - MK*MBASE
      MA%MP(2) = MA%MP(2) + 1
      MA%MP(J+1) = ML
      IF (MK > 0) THEN
          MVAL = MK
          J = J - 1
          IF (J >= 2) GO TO 120

!             Here IVAL cannot be expressed exactly.

          WRITE (STR,"(I50)") IVAL
          CALL FMST2M(STR,MA)
          RETURN
      ENDIF

!             Normalize MA.

      KB = N1 - J + 2
      JM2 = J - 2
      DO J = 2, KB
         MA%MP(J+1) = MA%MP(J+JM2+1)
      ENDDO
      KB1 = KB + 1
      IF (KB1 <= N1) THEN
          DO J = KB1, N1
             MA%MP(J+1) = 0
          ENDDO
      ENDIF

      MA%MP(1) = 1
      IF (IVAL < 0 .AND. MA%MP(2) /= MUNKNO .AND. MA%MP(3) /= 0) MA%MP(1) = -1

  150 RETURN
      END SUBROUTINE FMDI2M


      SUBROUTINE FMM2DI(MA,IVAL)

!  Convert multiple precision MA to double length integer IVAL.

      USE FMVALS
      IMPLICIT NONE

      TYPE(MULTI) :: MA
      INTEGER (DOUBLE_INT) :: IVAL

      INTEGER (DOUBLE_INT) :: IBASE,J,KA,KB,LARGE,N1
      INTENT (IN) :: MA
      INTENT (INOUT) :: IVAL

      KFLAG = 0
      N1 = NDIG + 1
      LARGE = HUGE(IVAL)/MBASE
      IBASE = MBASE
      IVAL = 0
      IF (MA%MP(2) <= 0) THEN
          IF (MA%MP(3) /= 0) KFLAG = 2
          RETURN
      ENDIF

      KB = MA%MP(2) + 1
      IVAL = ABS(MA%MP(3))
      IF (KB >= 3) THEN
          DO J = 3, KB
             IF (IVAL > LARGE) THEN
                 KFLAG = -4
                 IF (MA%MP(2) /= MUNKNO) CALL FMWARN
                 IVAL = IUNKNO
                 RETURN
             ENDIF
             IF (J <= N1) THEN
                 IVAL = IVAL*IBASE
                 IF (IVAL > HUGE(IVAL)-MA%MP(J+1)) THEN
                     KFLAG = -4
                     IF (MA%MP(2) /= MUNKNO) CALL FMWARN
                     IVAL = IUNKNO
                     RETURN
                 ELSE
                     IVAL = IVAL + INT(MA%MP(J+1))
                 ENDIF
             ELSE
                 IVAL = IVAL*IBASE
             ENDIF
          ENDDO
      ENDIF

      IF (MA%MP(1) < 0) IVAL = -IVAL

!             Check to see if MA is an integer.

      KA = KB + 1
      IF (KA <= N1) THEN
          DO J = KA, N1
             IF (MA%MP(J+1) /= 0) THEN
                 KFLAG = 2
                 RETURN
             ENDIF
          ENDDO
      ENDIF

      RETURN
      END SUBROUTINE FMM2DI


      SUBROUTINE IMDI2M(IVAL,MA)

!  MA = IVAL

!  Convert a double length integer to an IM number.

      USE FMVALS
      IMPLICIT NONE

      TYPE(MULTI) :: MA
      INTEGER (DOUBLE_INT) :: IVAL

      INTEGER :: NDSAVE
      INTENT (IN) :: IVAL
      INTENT (INOUT) :: MA
      TYPE(MULTI), SAVE :: MTLVFM

      CALL FMDI2M(IVAL,MTLVFM)

      IF (INT(MTLVFM%MP(2)) > NDIG) THEN
          NDSAVE = NDIG
          NDIG = MAX(2,INT(MTLVFM%MP(2)))
          CALL FMDI2M(IVAL,MTLVFM)
          CALL IMFM2I(MTLVFM,MA)
          NDIG = NDSAVE
      ELSE
          CALL IMFM2I(MTLVFM,MA)
      ENDIF

      RETURN
      END SUBROUTINE IMDI2M


      SUBROUTINE IMM2DI(MA,IVAL)

!  IVAL = MA

!  Convert an IM number to double length integer.

      USE FMVALS
      IMPLICIT NONE

      TYPE(MULTI) :: MA
      INTEGER (DOUBLE_INT) :: IVAL

      INTEGER :: NDSAVE
      INTENT (IN) :: MA
      INTENT (INOUT) :: IVAL
      TYPE(MULTI), SAVE :: MTLVFM

      NDSAVE = NDIG
      NDIG = MAX(2,INT(MA%MP(2)))

      CALL IMI2FM(MA,MTLVFM)
      CALL FMM2DI(MTLVFM,IVAL)

      NDIG = NDSAVE
      RETURN
      END SUBROUTINE IMM2DI


   FUNCTION FM_DI(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D
      CALL FMDI2M(D,RETURN_VALUE%MFM)
   END FUNCTION FM_DI

   FUNCTION FM_DI1(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: D
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FM_DI1

   FUNCTION FM_DI2(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: D
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FM_DI2

   FUNCTION IM_DI(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D
      CALL IMDI2M(D,RETURN_VALUE%MIM)
   END FUNCTION IM_DI

   FUNCTION IM_DI1(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: D
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION IM_DI1

   FUNCTION IM_DI2(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: D
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION IM_DI2

   FUNCTION ZM_DI(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,RETURN_VALUE%MZM)
   END FUNCTION ZM_DI

   FUNCTION ZM2_DI(D1,D2)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D1,D2
      INTENT (IN) :: D1,D2
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FMDI2M(D1,MTLVFM)
      CALL FMDI2M(D2,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,RETURN_VALUE%MZM)
   END FUNCTION ZM2_DI

   FUNCTION ZM_DI1(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION ZM_DI1

   FUNCTION ZM_DI2(D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION ZM_DI2

   FUNCTION FM_2DI(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: RETURN_VALUE
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      CALL FMM2DI(MA%MFM,RETURN_VALUE)
   END FUNCTION FM_2DI

   FUNCTION IM_2DI(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: RETURN_VALUE
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      CALL IMM2DI(MA%MIM,RETURN_VALUE)
   END FUNCTION IM_2DI

   FUNCTION ZM_2DI(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT) :: RETURN_VALUE
      INTENT (IN) :: MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL ZMREAL(MA%MZM,MTLVFM)
      CALL FMM2DI(MTLVFM,RETURN_VALUE)
   END FUNCTION ZM_2DI

   FUNCTION FM_2DI1(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      DO J = 1, N
         CALL FMM2DI(MA(J)%MFM,RETURN_VALUE(J))
      ENDDO
   END FUNCTION FM_2DI1

   FUNCTION IM_2DI1(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      DO J = 1, N
         CALL IMM2DI(MA(J)%MIM,RETURN_VALUE(J))
      ENDDO
   END FUNCTION IM_2DI1

   FUNCTION ZM_2DI1(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      DO J = 1, N
         CALL FMM2DI(MA(J)%MZM(1),RETURN_VALUE(J))
      ENDDO
   END FUNCTION ZM_2DI1

   FUNCTION FM_2DI2(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMM2DI(MA(J,K)%MFM,RETURN_VALUE(J,K))
         ENDDO
      ENDDO
   END FUNCTION FM_2DI2

   FUNCTION IM_2DI2(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMM2DI(MA(J,K)%MIM,RETURN_VALUE(J,K))
         ENDDO
      ENDDO
   END FUNCTION IM_2DI2

   FUNCTION ZM_2DI2(MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMM2DI(MA(J,K)%MZM(1),RETURN_VALUE(J,K))
         ENDDO
      ENDDO
   END FUNCTION ZM_2DI2


   SUBROUTINE FMEQ_DIFM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      CALL FMM2DI(MA%MFM,D)
   END SUBROUTINE FMEQ_DIFM

   SUBROUTINE FMEQ_DIIM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      CALL IMM2DI(MA%MIM,D)
   END SUBROUTINE FMEQ_DIIM

   SUBROUTINE FMEQ_DIZM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL ZMREAL(MA%MZM,MTLVFM)
      CALL FMM2DI(MTLVFM,D)
   END SUBROUTINE FMEQ_DIZM

   SUBROUTINE FMEQ_FMDI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      CALL FMDI2M(D,MA%MFM)
   END SUBROUTINE FMEQ_FMDI

   SUBROUTINE FMEQ_IMDI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER :: IVAL
      INTEGER (DOUBLE_INT) :: D
      CHARACTER(50) :: ST
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      IF (ABS(D) < HUGE(1)) THEN
          IVAL = INT(D)
          CALL IMI2M(IVAL,MA%MIM)
      ELSE
          WRITE (ST,'(I50)') D
          CALL IMST2M(ST,MA%MIM)
      ENDIF
   END SUBROUTINE FMEQ_IMDI

   SUBROUTINE FMEQ_ZMDI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MA%MZM)
   END SUBROUTINE FMEQ_ZMDI

   SUBROUTINE FMEQ_FM1DI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMEQ(MTLVFM,MA(J)%MFM)
      ENDDO
   END SUBROUTINE FMEQ_FM1DI

   SUBROUTINE FMEQ_DI1FM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTEGER (DOUBLE_INT) :: D2
      INTEGER :: J,N
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMM2DI(MA%MFM,D2)
      DO J = 1, N
         D(J) = D2
      ENDDO
   END SUBROUTINE FMEQ_DI1FM

   SUBROUTINE FMEQ_FM1DI1(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM
      IF (SIZE(MA) /= SIZE(D)) THEN
          CALL FMST2M(' UNKNOWN ',MTLVFM)
          DO J = 1, SIZE(MA)
             CALL FMEQ(MTLVFM,MA(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL FMDI2M(D(J),MA(J)%MFM)
      ENDDO
   END SUBROUTINE FMEQ_FM1DI1

   SUBROUTINE FMEQ_DI1FM1(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTEGER :: J,N
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(D)
             D(J) = RUNKNO
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL FMM2DI(MA(J)%MFM,D(J))
      ENDDO
   END SUBROUTINE FMEQ_DI1FM1

   SUBROUTINE FMEQ_FM2DI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMEQ(MTLVFM,MA(J,K)%MFM)
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_FM2DI

   SUBROUTINE FMEQ_DI2FM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTEGER (DOUBLE_INT) :: D2
      INTEGER :: J,K
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      CALL FMM2DI(MA%MFM,D2)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            D(J,K) = D2
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_DI2FM

   SUBROUTINE FMEQ_FM2DI2(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          CALL FMST2M(' UNKNOWN ',MTLVFM)
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMEQ(MTLVFM,MA(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MA(J,K)%MFM)
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_FM2DI2

   SUBROUTINE FMEQ_DI2FM2(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTEGER :: J,K
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(D,DIM=1)
             DO K = 1, SIZE(D,DIM=2)
                D(J,K) = RUNKNO
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMM2DI(MA(J,K)%MFM,D(J,K))
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_DI2FM2

   SUBROUTINE FMEQ_IM1DI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVIM
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, N
         CALL IMEQ(MTLVIM,MA(J)%MIM)
      ENDDO
   END SUBROUTINE FMEQ_IM1DI

   SUBROUTINE FMEQ_DI1IM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTEGER (DOUBLE_INT) :: D2
      INTEGER :: J,N
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL IMM2DI(MA%MIM,D2)
      DO J = 1, N
         D(J) = D2
      ENDDO
   END SUBROUTINE FMEQ_DI1IM

   SUBROUTINE FMEQ_IM1DI1(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVIM
      IF (SIZE(MA) /= SIZE(D)) THEN
          CALL IMST2M(' UNKNOWN ',MTLVIM)
          DO J = 1, SIZE(MA)
             CALL IMEQ(MTLVIM,MA(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL IMDI2M(D(J),MA(J)%MIM)
      ENDDO
   END SUBROUTINE FMEQ_IM1DI1

   SUBROUTINE FMEQ_DI1IM1(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTEGER :: J,N
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             D(J) = RUNKNO
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL IMM2DI(MA(J)%MIM,D(J))
      ENDDO
   END SUBROUTINE FMEQ_DI1IM1

   SUBROUTINE FMEQ_IM2DI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMEQ(MTLVIM,MA(J,K)%MIM)
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_IM2DI

   SUBROUTINE FMEQ_DI2IM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTEGER (DOUBLE_INT) :: D2
      INTEGER :: J,K
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      CALL IMM2DI(MA%MIM,D2)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            D(J,K) = D2
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_DI2IM

   SUBROUTINE FMEQ_IM2DI2(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVIM
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          CALL IMST2M(' UNKNOWN ',MTLVIM)
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMEQ(MTLVIM,MA(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MA(J,K)%MIM)
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_IM2DI2

   SUBROUTINE FMEQ_DI2IM2(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTEGER :: J,K
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                D(J,K) = RUNKNO
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMM2DI(MA(J,K)%MIM,D(J,K))
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_DI2IM2

   SUBROUTINE FMEQ_ZM1DI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMEQ(MTLVZM,MA(J)%MZM)
      ENDDO
   END SUBROUTINE FMEQ_ZM1DI

   SUBROUTINE FMEQ_DI1ZM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTEGER (DOUBLE_INT) :: D2
      INTEGER :: J,N
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL ZMREAL(MA%MZM,MTLVFM)
      CALL FMM2DI(MTLVFM,D2)
      DO J = 1, N
         D(J) = D2
      ENDDO
   END SUBROUTINE FMEQ_DI1ZM

   SUBROUTINE FMEQ_ZM1DI1(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      IF (SIZE(MA) /= SIZE(D)) THEN
          CALL ZMST2M(' UNKNOWN + UNKNOWN i ',MTLVZM)
          DO J = 1, SIZE(MA)
             CALL ZMEQ(MTLVZM,MA(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MA(J)%MZM)
      ENDDO
   END SUBROUTINE FMEQ_ZM1DI1

   SUBROUTINE FMEQ_DI1ZM1(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTEGER :: J,N
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             D(J) = RUNKNO
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL ZMREAL(MA(J)%MZM,MTLVFM)
         CALL FMM2DI(MTLVFM,D(J))
      ENDDO
   END SUBROUTINE FMEQ_DI1ZM1

   SUBROUTINE FMEQ_ZM2DI(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMEQ(MTLVZM,MA(J,K)%MZM)
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_ZM2DI

   SUBROUTINE FMEQ_DI2ZM(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTEGER (DOUBLE_INT) :: D2
      INTEGER :: J,K
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL ZMREAL(MA%MZM,MTLVFM)
      CALL FMM2DI(MTLVFM,D2)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            D(J,K) = D2
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_DI2ZM

   SUBROUTINE FMEQ_ZM2DI2(MA,D)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (INOUT) :: MA
      INTENT (IN) :: D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          CALL ZMST2M(' UNKNOWN + UNKNOWN i ',MTLVZM)
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMEQ(MTLVZM,MA(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MA(J,K)%MZM)
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_ZM2DI2

   SUBROUTINE FMEQ_DI2ZM2(D,MA)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTEGER :: J,K
      INTENT (INOUT) :: D
      INTENT (IN) :: MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                D(J,K) = RUNKNO
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMREAL(MA(J,K)%MZM,MTLVFM)
            CALL FMM2DI(MTLVFM,D(J,K))
         ENDDO
      ENDDO
   END SUBROUTINE FMEQ_DI2ZM2


   FUNCTION FMLEQ_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MTLVFM,'EQ',MA%MFM)
   END FUNCTION FMLEQ_DIFM

   FUNCTION FMLEQ_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: IMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      RETURN_VALUE = IMCOMP(MTLVIM,'EQ',MA%MIM)
   END FUNCTION FMLEQ_DIIM

   FUNCTION FMLEQ_DIZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE,L1,L2
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL ZMREAL(MA%MZM,MULVFM)
      L1 = FMCOMP(MTLVFM,'EQ',MULVFM)
      CALL FMI2M(0,MTLVFM)
      CALL ZMIMAG(MA%MZM,MULVFM)
      L2 = FMCOMP(MTLVFM,'EQ',MULVFM)
      RETURN_VALUE = L1.AND.L2
   END FUNCTION FMLEQ_DIZM

   FUNCTION FMLEQ_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MA%MFM,'EQ',MTLVFM)
   END FUNCTION FMLEQ_FMDI

   FUNCTION FMLEQ_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTEGER :: KA,NDSAVE
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      NDSAVE = NDIG
      KA = MA%MIM%MP(2)
      NDIG = MAX(KA+NGRD52,NDIG)
      CALL FMDI2M(D,MTLVFM)
      CALL IMI2FM(MA%MIM,MULVFM)
      RETURN_VALUE = FMCOMP(MULVFM,'EQ',MTLVFM)
      NDIG = NDSAVE
   END FUNCTION FMLEQ_IMDI

   FUNCTION FMLEQ_ZMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE,L1,L2
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL ZMREAL(MA%MZM,MULVFM)
      L1 = FMCOMP(MTLVFM,'EQ',MULVFM)
      CALL FMI2M(0,MTLVFM)
      CALL ZMIMAG(MA%MZM,MULVFM)
      L2 = FMCOMP(MTLVFM,'EQ',MULVFM)
      RETURN_VALUE = L1.AND.L2
   END FUNCTION FMLEQ_ZMDI


   FUNCTION FMLNE_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MTLVFM,'NE',MA%MFM)
   END FUNCTION FMLNE_DIFM

   FUNCTION FMLNE_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: IMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      RETURN_VALUE = IMCOMP(MTLVIM,'NE',MA%MIM)
   END FUNCTION FMLNE_DIIM

   FUNCTION FMLNE_DIZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE,L1,L2
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL ZMREAL(MA%MZM,MULVFM)
      L1 = FMCOMP(MTLVFM,'NE',MULVFM)
      CALL FMI2M(0,MTLVFM)
      CALL ZMIMAG(MA%MZM,MULVFM)
      L2 = FMCOMP(MTLVFM,'NE',MULVFM)
      RETURN_VALUE = L1.OR.L2
   END FUNCTION FMLNE_DIZM

   FUNCTION FMLNE_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MA%MFM,'NE',MTLVFM)
   END FUNCTION FMLNE_FMDI

   FUNCTION FMLNE_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTEGER :: KA,NDSAVE
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      NDSAVE = NDIG
      KA = MA%MIM%MP(2)
      NDIG = MAX(KA+NGRD52,NDIG)
      CALL FMDI2M(D,MTLVFM)
      CALL IMI2FM(MA%MIM,MULVFM)
      RETURN_VALUE = FMCOMP(MULVFM,'NE',MTLVFM)
      NDIG = NDSAVE
   END FUNCTION FMLNE_IMDI

   FUNCTION FMLNE_ZMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE,L1,L2
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL ZMREAL(MA%MZM,MULVFM)
      L1 = FMCOMP(MTLVFM,'NE',MULVFM)
      CALL FMI2M(0,MTLVFM)
      CALL ZMIMAG(MA%MZM,MULVFM)
      L2 = FMCOMP(MTLVFM,'NE',MULVFM)
      RETURN_VALUE = L1.OR.L2
   END FUNCTION FMLNE_ZMDI


   FUNCTION FMLGT_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MTLVFM,'GT',MA%MFM)
   END FUNCTION FMLGT_DIFM

   FUNCTION FMLGT_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: IMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      RETURN_VALUE = IMCOMP(MTLVIM,'GT',MA%MIM)
   END FUNCTION FMLGT_DIIM

   FUNCTION FMLGT_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MA%MFM,'GT',MTLVFM)
   END FUNCTION FMLGT_FMDI

   FUNCTION FMLGT_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTEGER :: KA,NDSAVE
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      NDSAVE = NDIG
      KA = MA%MIM%MP(2)
      NDIG = MAX(KA+NGRD52,NDIG)
      CALL FMDI2M(D,MTLVFM)
      CALL IMI2FM(MA%MIM,MULVFM)
      RETURN_VALUE = FMCOMP(MULVFM,'GT',MTLVFM)
      NDIG = NDSAVE
   END FUNCTION FMLGT_IMDI


   FUNCTION FMLGE_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MTLVFM,'GE',MA%MFM)
   END FUNCTION FMLGE_DIFM

   FUNCTION FMLGE_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: IMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      RETURN_VALUE = IMCOMP(MTLVIM,'GE',MA%MIM)
   END FUNCTION FMLGE_DIIM

   FUNCTION FMLGE_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MA%MFM,'GE',MTLVFM)
   END FUNCTION FMLGE_FMDI

   FUNCTION FMLGE_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTEGER :: KA,NDSAVE
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      NDSAVE = NDIG
      KA = MA%MIM%MP(2)
      NDIG = MAX(KA+NGRD52,NDIG)
      CALL FMDI2M(D,MTLVFM)
      CALL IMI2FM(MA%MIM,MULVFM)
      RETURN_VALUE = FMCOMP(MULVFM,'GE',MTLVFM)
      NDIG = NDSAVE
   END FUNCTION FMLGE_IMDI


   FUNCTION FMLLT_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MTLVFM,'LT',MA%MFM)
   END FUNCTION FMLLT_DIFM

   FUNCTION FMLLT_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: IMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      RETURN_VALUE = IMCOMP(MTLVIM,'LT',MA%MIM)
   END FUNCTION FMLLT_DIIM

   FUNCTION FMLLT_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MA%MFM,'LT',MTLVFM)
   END FUNCTION FMLLT_FMDI

   FUNCTION FMLLT_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTEGER :: KA,NDSAVE
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      NDSAVE = NDIG
      KA = MA%MIM%MP(2)
      NDIG = MAX(KA+NGRD52,NDIG)
      CALL FMDI2M(D,MTLVFM)
      CALL IMI2FM(MA%MIM,MULVFM)
      RETURN_VALUE = FMCOMP(MULVFM,'LT',MTLVFM)
      NDIG = NDSAVE
   END FUNCTION FMLLT_IMDI


   FUNCTION FMLLE_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MTLVFM,'LE',MA%MFM)
   END FUNCTION FMLLE_DIFM

   FUNCTION FMLLE_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: IMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      RETURN_VALUE = IMCOMP(MTLVIM,'LE',MA%MIM)
   END FUNCTION FMLLE_DIIM

   FUNCTION FMLLE_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      RETURN_VALUE = FMCOMP(MA%MFM,'LE',MTLVFM)
   END FUNCTION FMLLE_FMDI

   FUNCTION FMLLE_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      LOGICAL :: RETURN_VALUE
      LOGICAL, EXTERNAL :: FMCOMP
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTEGER :: KA,NDSAVE
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM
      CALL FM_UNDEF_INP(MA)
      NDSAVE = NDIG
      KA = MA%MIM%MP(2)
      NDIG = MAX(KA+NGRD52,NDIG)
      CALL FMDI2M(D,MTLVFM)
      CALL IMI2FM(MA%MIM,MULVFM)
      RETURN_VALUE = FMCOMP(MULVFM,'LE',MTLVFM)
      NDIG = NDSAVE
   END FUNCTION FMLLE_IMDI


   FUNCTION FMADD_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMADD(MTLVFM,MA%MFM,RETURN_VALUE%MFM)
   END FUNCTION FMADD_DIFM

   FUNCTION FMADD_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      CALL IMADD(MTLVIM,MA%MIM,RETURN_VALUE%MIM)
   END FUNCTION FMADD_DIIM

   FUNCTION FMADD_DIZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMADD(MTLVZM,MA%MZM,RETURN_VALUE%MZM)
   END FUNCTION FMADD_DIZM

   FUNCTION FMADD_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMADD(MA%MFM,MTLVFM,RETURN_VALUE%MFM)
   END FUNCTION FMADD_FMDI

   FUNCTION FMADD_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: RETURN_VALUE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      CALL IMADD(MA%MIM,MTLVIM,RETURN_VALUE%MIM)
   END FUNCTION FMADD_IMDI

   FUNCTION FMADD_ZMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMADD(MA%MZM,MTLVZM,RETURN_VALUE%MZM)
   END FUNCTION FMADD_ZMDI

   FUNCTION FMADD_DIFM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMADD(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMADD_DIFM1

   FUNCTION FMADD_DIIM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, N
         CALL IMADD(MTLVIM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMADD_DIIM1

   FUNCTION FMADD_FMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMADD(MA%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMADD_FMDI1

   FUNCTION FMADD_FM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMADD(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMADD_FM1DI

   FUNCTION FMADD_DI1FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMADD(MTLVFM,MA%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMADD_DI1FM

   FUNCTION FMADD_FM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMADD(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMADD_FM1DI1

   FUNCTION FMADD_DI1FM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMADD(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMADD_DI1FM1

   FUNCTION FMADD_DIFM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMADD(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DIFM2

   FUNCTION FMADD_DIIM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMADD(MTLVIM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DIIM2

   FUNCTION FMADD_FMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMADD(MA%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_FMDI2

   FUNCTION FMADD_FM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMADD(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_FM2DI

   FUNCTION FMADD_DI2FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMADD(MTLVFM,MA%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DI2FM

   FUNCTION FMADD_FM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMADD(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_FM2DI2

   FUNCTION FMADD_DI2FM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMADD(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DI2FM2

   FUNCTION FMADD_IMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMADD(MA%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMADD_IMDI1

   FUNCTION FMADD_IM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, N
         CALL IMADD(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMADD_IM1DI

   FUNCTION FMADD_DI1IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMADD(MTLVIM,MA%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMADD_DI1IM

   FUNCTION FMADD_IM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMADD(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMADD_IM1DI1

   FUNCTION FMADD_DI1IM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMADD(MTLVIM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMADD_DI1IM1

   FUNCTION FMADD_IMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMADD(MA%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_IMDI2

   FUNCTION FMADD_IM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMADD(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_IM2DI

   FUNCTION FMADD_DI2IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMADD(MTLVIM,MA%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DI2IM

   FUNCTION FMADD_IM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMADD(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_IM2DI2

   FUNCTION FMADD_DI2IM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMADD(MTLVIM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DI2IM2

   FUNCTION FMADD_DIZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMADD(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMADD_DIZM1

   FUNCTION FMADD_ZMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMADD(MA%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMADD_ZMDI1

   FUNCTION FMADD_ZM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMADD(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMADD_ZM1DI

   FUNCTION FMADD_DI1ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMADD(MTLVZM,MA%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMADD_DI1ZM

   FUNCTION FMADD_ZM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMADD(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMADD_ZM1DI1

   FUNCTION FMADD_DI1ZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMADD(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMADD_DI1ZM1

   FUNCTION FMADD_DIZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMADD(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DIZM2

   FUNCTION FMADD_ZMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMADD(MA%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_ZMDI2

   FUNCTION FMADD_ZM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMADD(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_ZM2DI

   FUNCTION FMADD_DI2ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMADD(MTLVZM,MA%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DI2ZM

   FUNCTION FMADD_ZM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMADD(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_ZM2DI2

   FUNCTION FMADD_DI2ZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMADD(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMADD_DI2ZM2


   FUNCTION FMSUB_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMSUB(MTLVFM,MA%MFM,RETURN_VALUE%MFM)
   END FUNCTION FMSUB_DIFM

   FUNCTION FMSUB_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVFM)
      CALL IMSUB(MTLVFM,MA%MIM,RETURN_VALUE%MIM)
   END FUNCTION FMSUB_DIIM

   FUNCTION FMSUB_DIZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMSUB(MTLVZM,MA%MZM,RETURN_VALUE%MZM)
   END FUNCTION FMSUB_DIZM

   FUNCTION FMSUB_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMSUB(MA%MFM,MTLVFM,RETURN_VALUE%MFM)
   END FUNCTION FMSUB_FMDI

   FUNCTION FMSUB_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: RETURN_VALUE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      CALL IMSUB(MA%MIM,MTLVIM,RETURN_VALUE%MIM)
   END FUNCTION FMSUB_IMDI

   FUNCTION FMSUB_ZMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMSUB(MA%MZM,MTLVZM,RETURN_VALUE%MZM)
   END FUNCTION FMSUB_ZMDI

   FUNCTION FMSUB_DIFM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMSUB(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMSUB_DIFM1

   FUNCTION FMSUB_DIIM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL IMSUB(MTLVFM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMSUB_DIIM1

   FUNCTION FMSUB_FMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMSUB(MA%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMSUB_FMDI1

   FUNCTION FMSUB_FM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMSUB(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMSUB_FM1DI

   FUNCTION FMSUB_DI1FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMSUB(MTLVFM,MA%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMSUB_DI1FM

   FUNCTION FMSUB_FM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMSUB(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMSUB_FM1DI1

   FUNCTION FMSUB_DI1FM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMSUB(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMSUB_DI1FM1

   FUNCTION FMSUB_DIFM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMSUB(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DIFM2

   FUNCTION FMSUB_DIIM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMSUB(MTLVFM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DIIM2

   FUNCTION FMSUB_FMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMSUB(MA%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_FMDI2

   FUNCTION FMSUB_FM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMSUB(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_FM2DI

   FUNCTION FMSUB_DI2FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMSUB(MTLVFM,MA%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DI2FM

   FUNCTION FMSUB_FM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMSUB(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_FM2DI2

   FUNCTION FMSUB_DI2FM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMSUB(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DI2FM2

   FUNCTION FMSUB_IMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMSUB(MA%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMSUB_IMDI1

   FUNCTION FMSUB_IM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, N
         CALL IMSUB(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMSUB_IM1DI

   FUNCTION FMSUB_DI1IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMSUB(MTLVIM,MA%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMSUB_DI1IM

   FUNCTION FMSUB_IM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMSUB(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMSUB_IM1DI1

   FUNCTION FMSUB_DI1IM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMSUB(MTLVIM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMSUB_DI1IM1

   FUNCTION FMSUB_IMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMSUB(MA%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_IMDI2

   FUNCTION FMSUB_IM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMSUB(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_IM2DI

   FUNCTION FMSUB_DI2IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMSUB(MTLVIM,MA%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DI2IM

   FUNCTION FMSUB_IM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMSUB(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_IM2DI2

   FUNCTION FMSUB_DI2IM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMSUB(MTLVIM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DI2IM2

   FUNCTION FMSUB_DIZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMSUB(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMSUB_DIZM1

   FUNCTION FMSUB_ZMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMSUB(MA%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMSUB_ZMDI1

   FUNCTION FMSUB_ZM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMSUB(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMSUB_ZM1DI

   FUNCTION FMSUB_DI1ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMSUB(MTLVZM,MA%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMSUB_DI1ZM

   FUNCTION FMSUB_ZM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMSUB(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMSUB_ZM1DI1

   FUNCTION FMSUB_DI1ZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMSUB(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMSUB_DI1ZM1

   FUNCTION FMSUB_DIZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMSUB(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DIZM2

   FUNCTION FMSUB_ZMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMSUB(MA%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_ZMDI2

   FUNCTION FMSUB_ZM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMSUB(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_ZM2DI

   FUNCTION FMSUB_DI2ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMSUB(MTLVZM,MA%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DI2ZM

   FUNCTION FMSUB_ZM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMSUB(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_ZM2DI2

   FUNCTION FMSUB_DI2ZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMSUB(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMSUB_DI2ZM2


   FUNCTION FMMPY_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMMPY(MTLVFM,MA%MFM,RETURN_VALUE%MFM)
   END FUNCTION FMMPY_DIFM

   FUNCTION FMMPY_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVFM)
      CALL IMMPY(MTLVFM,MA%MIM,RETURN_VALUE%MIM)
   END FUNCTION FMMPY_DIIM

   FUNCTION FMMPY_DIZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMMPY(MTLVZM,MA%MZM,RETURN_VALUE%MZM)
   END FUNCTION FMMPY_DIZM

   FUNCTION FMMPY_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMMPY(MA%MFM,MTLVFM,RETURN_VALUE%MFM)
   END FUNCTION FMMPY_FMDI

   FUNCTION FMMPY_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: RETURN_VALUE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      CALL IMMPY(MA%MIM,MTLVIM,RETURN_VALUE%MIM)
   END FUNCTION FMMPY_IMDI

   FUNCTION FMMPY_ZMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMMPY(MA%MZM,MTLVZM,RETURN_VALUE%MZM)
   END FUNCTION FMMPY_ZMDI

   FUNCTION FMMPY_DIFM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMMPY(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMMPY_DIFM1

   FUNCTION FMMPY_DIIM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL IMMPY(MTLVFM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMMPY_DIIM1

   FUNCTION FMMPY_FMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMMPY(MA%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMMPY_FMDI1

   FUNCTION FMMPY_FM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMMPY(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMMPY_FM1DI

   FUNCTION FMMPY_DI1FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMMPY(MTLVFM,MA%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMMPY_DI1FM

   FUNCTION FMMPY_FM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMMPY(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMMPY_FM1DI1

   FUNCTION FMMPY_DI1FM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMMPY(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMMPY_DI1FM1

   FUNCTION FMMPY_DIFM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMMPY(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DIFM2

   FUNCTION FMMPY_DIIM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMMPY(MTLVFM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DIIM2

   FUNCTION FMMPY_FMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMMPY(MA%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_FMDI2

   FUNCTION FMMPY_FM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMMPY(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_FM2DI

   FUNCTION FMMPY_DI2FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMMPY(MTLVFM,MA%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DI2FM

   FUNCTION FMMPY_FM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMMPY(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_FM2DI2

   FUNCTION FMMPY_DI2FM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMMPY(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DI2FM2

   FUNCTION FMMPY_IMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMMPY(MA%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMMPY_IMDI1

   FUNCTION FMMPY_IM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, N
         CALL IMMPY(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMMPY_IM1DI

   FUNCTION FMMPY_DI1IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMMPY(MTLVIM,MA%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMMPY_DI1IM

   FUNCTION FMMPY_IM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMMPY(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMMPY_IM1DI1

   FUNCTION FMMPY_DI1IM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMMPY(MTLVIM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMMPY_DI1IM1

   FUNCTION FMMPY_IMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMMPY(MA%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_IMDI2

   FUNCTION FMMPY_IM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMMPY(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_IM2DI

   FUNCTION FMMPY_DI2IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMMPY(MTLVIM,MA%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DI2IM

   FUNCTION FMMPY_IM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMMPY(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_IM2DI2

   FUNCTION FMMPY_DI2IM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMMPY(MTLVIM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DI2IM2

   FUNCTION FMMPY_DIZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMMPY(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMMPY_DIZM1

   FUNCTION FMMPY_ZMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMMPY(MA%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMMPY_ZMDI1

   FUNCTION FMMPY_ZM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMMPY(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMMPY_ZM1DI

   FUNCTION FMMPY_DI1ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMMPY(MTLVZM,MA%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMMPY_DI1ZM

   FUNCTION FMMPY_ZM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMMPY(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMMPY_ZM1DI1

   FUNCTION FMMPY_DI1ZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMMPY(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMMPY_DI1ZM1

   FUNCTION FMMPY_DIZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMMPY(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DIZM2

   FUNCTION FMMPY_ZMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMMPY(MA%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_ZMDI2

   FUNCTION FMMPY_ZM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMMPY(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_ZM2DI

   FUNCTION FMMPY_DI2ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMMPY(MTLVZM,MA%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DI2ZM

   FUNCTION FMMPY_ZM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMMPY(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_ZM2DI2

   FUNCTION FMMPY_DI2ZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMMPY(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMMPY_DI2ZM2


   FUNCTION FMDIV_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMDIV(MTLVFM,MA%MFM,RETURN_VALUE%MFM)
   END FUNCTION FMDIV_DIFM

   FUNCTION FMDIV_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVFM)
      CALL IMDIV(MTLVFM,MA%MIM,RETURN_VALUE%MIM)
   END FUNCTION FMDIV_DIIM

   FUNCTION FMDIV_DIZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMDIV(MTLVZM,MA%MZM,RETURN_VALUE%MZM)
   END FUNCTION FMDIV_DIZM

   FUNCTION FMDIV_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMDIV(MA%MFM,MTLVFM,RETURN_VALUE%MFM)
   END FUNCTION FMDIV_FMDI

   FUNCTION FMDIV_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: RETURN_VALUE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      CALL IMDIV(MA%MIM,MTLVIM,RETURN_VALUE%MIM)
   END FUNCTION FMDIV_IMDI

   FUNCTION FMDIV_ZMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMDIV(MA%MZM,MTLVZM,RETURN_VALUE%MZM)
   END FUNCTION FMDIV_ZMDI

   FUNCTION FMDIV_DIFM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMDIV(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMDIV_DIFM1

   FUNCTION FMDIV_DIIM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL IMDIV(MTLVFM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMDIV_DIIM1

   FUNCTION FMDIV_FMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMDIV(MA%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMDIV_FMDI1

   FUNCTION FMDIV_FM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, N
         CALL FMDIV(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMDIV_FM1DI

   FUNCTION FMDIV_DI1FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMDIV(MTLVFM,MA%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMDIV_DI1FM

   FUNCTION FMDIV_FM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMDIV(MA(J)%MFM,MTLVFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMDIV_FM1DI1

   FUNCTION FMDIV_DI1FM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (FM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J)%MFM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL FMDIV(MTLVFM,MA(J)%MFM,RETURN_VALUE(J)%MFM)
      ENDDO
   END FUNCTION FMDIV_DI1FM1

   FUNCTION FMDIV_DIFM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDIV(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DIFM2

   FUNCTION FMDIV_DIIM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDIV(MTLVFM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DIIM2

   FUNCTION FMDIV_FMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMDIV(MA%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_FMDI2

   FUNCTION FMDIV_FM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDIV(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_FM2DI

   FUNCTION FMDIV_DI2FM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMDIV(MTLVFM,MA%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DI2FM

   FUNCTION FMDIV_FM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      TYPE (FM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMDIV(MA(J,K)%MFM,MTLVFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_FM2DI2

   FUNCTION FMDIV_DI2FM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (FM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL FMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MFM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL FMDIV(MTLVFM,MA(J,K)%MFM,RETURN_VALUE(J,K)%MFM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DI2FM2

   FUNCTION FMDIV_IMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMDIV(MA%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMDIV_IMDI1

   FUNCTION FMDIV_IM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, N
         CALL IMDIV(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMDIV_IM1DI

   FUNCTION FMDIV_DI1IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMDIV(MTLVIM,MA%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMDIV_DI1IM

   FUNCTION FMDIV_IM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMDIV(MA(J)%MIM,MTLVIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMDIV_IM1DI1

   FUNCTION FMDIV_DI1IM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (IM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J)%MIM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      DO J = 1, N
         CALL IMDI2M(D(J),MTLVIM)
         CALL IMDIV(MTLVIM,MA(J)%MIM,RETURN_VALUE(J)%MIM)
      ENDDO
   END FUNCTION FMDIV_DI1IM1

   FUNCTION FMDIV_IMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMDIV(MA%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_IMDI2

   FUNCTION FMDIV_IM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDIV(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_IM2DI

   FUNCTION FMDIV_DI2IM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMDIV(MTLVIM,MA%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DI2IM

   FUNCTION FMDIV_IM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      TYPE (IM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMDIV(MA(J,K)%MIM,MTLVIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_IM2DI2

   FUNCTION FMDIV_DI2IM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (IM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL IMST2M(' UNKNOWN ',RETURN_VALUE(J,K)%MIM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL IMDI2M(D(J,K),MTLVIM)
            CALL IMDIV(MTLVIM,MA(J,K)%MIM,RETURN_VALUE(J,K)%MIM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DI2IM2

   FUNCTION FMDIV_DIZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMDIV(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMDIV_DIZM1

   FUNCTION FMDIV_ZMDI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMDIV(MA%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMDIV_ZMDI1

   FUNCTION FMDIV_ZM1DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, N
         CALL ZMDIV(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMDIV_ZM1DI

   FUNCTION FMDIV_DI1ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMDIV(MTLVZM,MA%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMDIV_DI1ZM

   FUNCTION FMDIV_ZM1DI1(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA)) :: RETURN_VALUE
      INTEGER :: J,N
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMDIV(MA(J)%MZM,MTLVZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMDIV_ZM1DI1

   FUNCTION FMDIV_DI1ZM1(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:) :: D
      TYPE (ZM), DIMENSION(SIZE(D)) :: RETURN_VALUE
      INTEGER :: J,N
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA) /= SIZE(D)) THEN
          DO J = 1, SIZE(MA)
             CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J)%MZM)
          ENDDO
          RETURN
      ENDIF
      N = SIZE(D)
      CALL FMI2M(0,MULVFM)
      DO J = 1, N
         CALL FMDI2M(D(J),MTLVFM)
         CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
         CALL ZMDIV(MTLVZM,MA(J)%MZM,RETURN_VALUE(J)%MZM)
      ENDDO
   END FUNCTION FMDIV_DI1ZM1

   FUNCTION FMDIV_DIZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMDIV(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DIZM2

   FUNCTION FMDIV_ZMDI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMDIV(MA%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_ZMDI2

   FUNCTION FMDIV_ZM2DI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL ZMDIV(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_ZM2DI

   FUNCTION FMDIV_DI2ZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(D,DIM=1)
         DO K = 1, SIZE(D,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMDIV(MTLVZM,MA%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DI2ZM

   FUNCTION FMDIV_ZM2DI2(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      TYPE (ZM), DIMENSION(SIZE(MA,DIM=1),SIZE(MA,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMDIV(MA(J,K)%MZM,MTLVZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_ZM2DI2

   FUNCTION FMDIV_DI2ZM2(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM), DIMENSION(:,:) :: MA
      INTEGER (DOUBLE_INT), DIMENSION(:,:) :: D
      TYPE (ZM), DIMENSION(SIZE(D,DIM=1),SIZE(D,DIM=2)) :: RETURN_VALUE
      INTEGER :: J,K
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      IF (SIZE(MA,DIM=1) /= SIZE(D,DIM=1) .OR. SIZE(MA,DIM=2) /= SIZE(D,DIM=2)) THEN
          DO J = 1, SIZE(MA,DIM=1)
             DO K = 1, SIZE(MA,DIM=2)
                CALL ZMST2M(' UNKNOWN + UNKNOWN i ',RETURN_VALUE(J,K)%MZM)
             ENDDO
          ENDDO
          RETURN
      ENDIF
      CALL FMI2M(0,MULVFM)
      DO J = 1, SIZE(MA,DIM=1)
         DO K = 1, SIZE(MA,DIM=2)
            CALL FMDI2M(D(J,K),MTLVFM)
            CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
            CALL ZMDIV(MTLVZM,MA(J,K)%MZM,RETURN_VALUE(J,K)%MZM)
         ENDDO
      ENDDO
   END FUNCTION FMDIV_DI2ZM2


   FUNCTION FMPWR_DIFM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMPWR(MTLVFM,MA%MFM,RETURN_VALUE%MFM)
   END FUNCTION FMPWR_DIFM

   FUNCTION FMPWR_DIIM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVFM)
      CALL IMPWR(MTLVFM,MA%MIM,RETURN_VALUE%MIM)
   END FUNCTION FMPWR_DIIM

   FUNCTION FMPWR_DIZM(D,MA)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: D,MA
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMPWR(MTLVZM,MA%MZM,RETURN_VALUE%MZM)
   END FUNCTION FMPWR_DIZM

   FUNCTION FMPWR_FMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (FM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMPWR(MA%MFM,MTLVFM,RETURN_VALUE%MFM)
   END FUNCTION FMPWR_FMDI

   FUNCTION FMPWR_IMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (IM) :: RETURN_VALUE
      TYPE (IM) :: MA
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVIM
      CALL FM_UNDEF_INP(MA)
      CALL IMDI2M(D,MTLVIM)
      CALL IMPWR(MA%MIM,MTLVIM,RETURN_VALUE%MIM)
   END FUNCTION FMPWR_IMDI

   FUNCTION FMPWR_ZMDI(MA,D)     RESULT (RETURN_VALUE)
      USE FMVALS
      IMPLICIT NONE
      TYPE (ZM) :: MA,RETURN_VALUE
      INTEGER (DOUBLE_INT) :: D
      INTENT (IN) :: MA,D
      TYPE(MULTI), SAVE :: MTLVFM,MULVFM,MTLVZM(2)
      CALL FM_UNDEF_INP(MA)
      CALL FMDI2M(D,MTLVFM)
      CALL FMI2M(0,MULVFM)
      CALL ZMCMPX(MTLVFM,MULVFM,MTLVZM)
      CALL ZMPWR(MA%MZM,MTLVZM,RETURN_VALUE%MZM)
   END FUNCTION FMPWR_ZMDI

 END MODULE FM_DOUBLE_INT
